
\subsection{ascii.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
// ascii art demo
// store each letter as a 2d array
// based on the "standard" font at http://www.figlet.org/fonts/standard.flf
// here we only have capital alphabet characters
array<string> mapNumToLetter = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
array<array<string>> alphabet = new(array<array<string>>[26]);
for(int i = 0; i< 26; i++) {
	alphabet[i] = new(array<string>[6]);
}

alphabet[0][0] = "     _    ";
alphabet[0][1] = "    / \   ";
alphabet[0][2] = "   / _ \  ";
alphabet[0][3] = "  / ___ \ ";
alphabet[0][4] = " /_/   \_\";
alphabet[0][5] = "          ";

alphabet[1][0] = "  ____  ";
alphabet[1][1] = " | __ ) ";
alphabet[1][2] = " |  _ \ ";
alphabet[1][3] = " | |_) |";
alphabet[1][4] = " |____/ ";
alphabet[1][5] = "        ";

alphabet[2][0] = "   ____ ";
alphabet[2][1] = "  / ___|";
alphabet[2][2] = " | |    ";
alphabet[2][3] = " | |___ ";
alphabet[2][4] = "  \____|";
alphabet[2][5] = "        ";

alphabet[3][0] = "  ____  ";
alphabet[3][1] = " |  _ \ ";
alphabet[3][2] = " | | | |";
alphabet[3][3] = " | |_| |";
alphabet[3][4] = " |____/ ";
alphabet[3][5] = "        ";

alphabet[4][0] = "  _____ ";
alphabet[4][1] = " | ____|";
alphabet[4][2] = " |  _|  ";
alphabet[4][3] = " | |___ ";
alphabet[4][4] = " |_____|";
alphabet[4][5] = "        ";

alphabet[5][0] = "  _____ ";
alphabet[5][1] = " | ____|";
alphabet[5][2] = " | |_   ";
alphabet[5][3] = " |  _|  ";
alphabet[5][4] = " |_|    ";
alphabet[5][5] = "        ";

alphabet[6][0] = "   ____ ";
alphabet[6][1] = "  / ___|";
alphabet[6][2] = " | |  _ ";
alphabet[6][3] = " | |_| |";
alphabet[6][4] = "  \____|";
alphabet[6][5] = "        ";

alphabet[7][0] = "  _   _ ";
alphabet[7][1] = " | | | |";
alphabet[7][2] = " | |_| |";
alphabet[7][3] = " |  _  |";
alphabet[7][4] = " |_| |_|";
alphabet[7][5] = "        ";

alphabet[8][0] = "  ___ ";
alphabet[8][1] = " |_ _|";
alphabet[8][2] = "  | | ";
alphabet[8][3] = "  | | ";
alphabet[8][4] = " |___|";
alphabet[8][5] = "      ";

alphabet[9][0] = "      _ ";
alphabet[9][1] = "     | |";
alphabet[9][2] = "  _  | |";
alphabet[9][3] = " | |_| |";
alphabet[9][4] = "  \___/ ";
alphabet[9][5] = "        ";

alphabet[10][0] = "  _  __";
alphabet[10][1] = " | |/ /";
alphabet[10][2] = " | ' / ";
alphabet[10][3] = " | . \ ";
alphabet[10][4] = " |_|\_\";
alphabet[10][5] = "       ";

alphabet[11][0] = "  _     ";
alphabet[11][1] = " | |    ";
alphabet[11][2] = " | |    ";
alphabet[11][3] = " | |___ ";
alphabet[11][4] = " |_____|";
alphabet[11][5] = "        ";

alphabet[12][0] = "  __  __ ";
alphabet[12][1] = " |  \/  |";
alphabet[12][2] = " | |\/| |";
alphabet[12][3] = " | |  | |";
alphabet[12][4] = " |_|  |_|";
alphabet[12][5] = "         ";

alphabet[13][0] = "  _   _ ";
alphabet[13][1] = " | \ | |";
alphabet[13][2] = " |  \| |";
alphabet[13][3] = " | |\  |";
alphabet[13][4] = " |_| \_|";
alphabet[13][5] = "        ";

alphabet[14][0] = "   ___  ";
alphabet[14][1] = "  / _ \ ";
alphabet[14][2] = " | | | |";
alphabet[14][3] = " | |_| |";
alphabet[14][4] = "  \___/ ";
alphabet[14][5] = "        ";

alphabet[15][0] = "  ____  ";
alphabet[15][1] = " |  _ \ ";
alphabet[15][2] = " | |_) |";
alphabet[15][3] = " |  __/ ";
alphabet[15][4] = " |_|    ";
alphabet[15][5] = "        ";

alphabet[16][0] = "   ___  ";
alphabet[16][1] = "  / _ \ ";
alphabet[16][2] = " | | | |";
alphabet[16][3] = " | |_| |";
alphabet[16][4] = "  \__\_\";
alphabet[16][5] = "        ";

alphabet[17][0] = "  ____  ";
alphabet[17][1] = " |  _ \ ";
alphabet[17][2] = " | |_) |";
alphabet[17][3] = " |  _ < ";
alphabet[17][4] = " |_| \_\";
alphabet[17][5] = "        ";

alphabet[18][0] = "  ____  ";
alphabet[18][1] = " / ___| ";
alphabet[18][2] = " \___ \ ";
alphabet[18][3] = "  ___) |";
alphabet[18][4] = " |____/ ";
alphabet[18][5] = "        ";

alphabet[19][0] = "  _____ ";
alphabet[19][1] = " |_   _|";
alphabet[19][2] = "   | |  ";
alphabet[19][3] = "   | |  ";
alphabet[19][4] = "   |_|  ";
alphabet[19][5] = "        ";

alphabet[20][0] = "  _   _ ";
alphabet[20][1] = " | | | |";
alphabet[20][2] = " | | | |";
alphabet[20][3] = " | | | |";
alphabet[20][4] = "  \___/ ";
alphabet[20][5] = "        ";

alphabet[21][0] = " __     __";
alphabet[21][1] = " \ \   / /";
alphabet[21][2] = "  \ \ / / ";
alphabet[21][3] = "   \ V /  ";
alphabet[21][4] = "    \_/   ";
alphabet[21][5] = "          ";

alphabet[22][0] = " __        __";
alphabet[22][1] = " \ \      / /";
alphabet[22][2] = "  \ \ /\ / / ";
alphabet[22][3] = "   \ V  V /  ";
alphabet[22][4] = "    \_/\_/   ";
alphabet[22][5] = "             ";

alphabet[23][0] = " __  __";
alphabet[23][1] = " \ \/ /";
alphabet[23][2] = "  \  / ";
alphabet[23][3] = "  /  \ ";
alphabet[23][4] = " /_/\_\";
alphabet[23][5] = "       ";

alphabet[24][0] = " __   __";
alphabet[24][1] = " \ \ / /";
alphabet[24][2] = "  \ V / ";
alphabet[24][3] = "   | |  ";
alphabet[24][4] = "   |_|  ";
alphabet[24][5] = "        ";

alphabet[25][0] = "  _____";
alphabet[25][1] = " |__  /";
alphabet[25][2] = "   / / ";
alphabet[25][3] = "  / /_ ";
alphabet[25][4] = " /____|";
alphabet[25][5] = "       ";

// technically can hardcode 6 below
function printLetter (array<string> letter, int sz) void {
	for(int i = 0; i<sz; i++) {
		println(letter[i]);
	}
}

// match the character to the alphabet index
function lookupIndex (string char) int {
	for (int i = 0; i<26; i++){
		if (mapNumToLetter[i]==char) {
			return i;
		}
	}
	return -1;
}

// the passed in argument is an array of CHARACTERS
function printString (array<string> toPrint, int sz) void {
	int idx = 0;
	for(int j = 0; j<6; j++){
		for(int i = 0; i<sz; i++){
			idx = lookupIndex(toPrint[i]);
			if (idx!=-1) {
				print(alphabet[idx][j]);
			}
		}
		println("");
	}
}

println("Here's a sample of the font");
for (int i = 0; i<3; i++){
	// print 3 letters
	printLetter(alphabet[i], 6);
}

array<string> toPrintStr = new(array<string>[10]);

println("Now ascii-fy your own string up to 10 characters");
println("Please input a string of just lower case characters");

function getUserIn() int {
	for (int i = 0; i<10; i++){
		string result = scan_char();
		if(result == ""){
			return i;
		}
		toPrintStr[i] = result;
	} 
	return 10;
}

int numChars = getUserIn();
printString(toPrintStr, numChars);
\end{lstlisting}
\end{mdframed}
\subsection{bubblesort.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
struct Object {
	int index;
	int data;
}

function compareData(Object a, Object b) bool {
    return a.data < b.data;
}

function compareIndex(Object a, Object b) bool {
    return a.index < b.index;
}

function printData(array<Object> arr, int n) void {
	for (int i = 0; i < n; i++) {
		println(str_of_int(arr[i].data));
	}
	
	return;
}

function printIndex(array<Object> arr, int n) void {
	for (int i = 0; i < n; i++) {
		println(str_of_int(arr[i].index));
	}
	
	return;
}

function bubbleSort(array<Object> arr, int n, func(Object, Object; bool) compare) array<Object> {
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n - i - 1; j++) {
			if (compare(arr[j + 1], arr[j])) {
				Object temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
	
	return arr;
}

array<int> indices = [1,3,8,6,9,7,0,2,4,5];
array<int> datapoints = [106,101,104,108,105,103,102,109,107,100];

int n = 10;
array<Object> objects = new(array<Object>[n]);

for (int i = 0; i < n; i++) {
	objects[i] = new(Object);
	objects[i].index = indices[i]; 
	objects[i].data = datapoints[i];
}

printIndex(objects, n);
printData(objects, n);

bubbleSort(objects, n, compareIndex);
printIndex(objects, n);

bubbleSort(objects, n, compareData);
printData(objects, n);



\end{lstlisting}
\end{mdframed}
\subsection{demo1.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
// apply a function filter to an array of structs
// the function filter is dependent on the user choice


function errExit () void {
	println("Invalid option. Exiting");
	exit_success();
}

println("Make an array of structs:");
println("What size array do you want?");
string szStr = scan_line(5);
int sz = int_of_str(szStr);

if (sz == -1){
	errExit();
}

rand_autoseed();

println("Make a struct to populate the array:");
println("Here are your choices:");
println("1: BankAccount");
println("2: Rectangle");
println("3: Point");
println("4: Student");
println("Pick a number:");
string structTypeStr = scan_line(5);
int structType = int_of_str(structTypeStr);

struct BankAccount {
	float balance = float_of_int(rand_afterseed()%100)+.5;
	int id = rand_afterseed();
}

struct Rectangle {
	float width = float_of_int(rand_afterseed()%10);
	float length = float_of_int(rand_afterseed()%10);
}

struct Point {
	float x = float_of_int(rand_afterseed()%10);
	float y = float_of_int(rand_afterseed()%10);
}

struct Student {
	int id = rand_afterseed()%10;
	string name = "NoName";
	int year = 2018;
	int numClasses = 0;
}

// this wrapper allows us to mimic a wildcard-like type
struct Wrapper {
	BankAccount ba;
	Rectangle rec;
	Point pt;
	Student st;
}

array<Wrapper> arr = new(array<Wrapper>[sz]);

// based on the user chosen type, initialize the type
function initializeWrapperArr(array<Wrapper> temp, int sz, int whichType) void {
	for(int j = 0; j< sz; j++){
		temp[j] = new(Wrapper);
	}

	if (whichType == 1) {
		for(int i = 0; i<sz; i++) {
			temp[i].ba = new(BankAccount);
		}
	} elif (whichType == 2) {
		for(int i = 0; i<sz; i++) {
			temp[i].rec = new(Rectangle);
		}
	} elif (whichType == 3) {
		for(int i = 0; i<sz; i++) {
			temp[i].pt = new(Point);
		}	
	} else{
		for(int i = 0; i<sz; i++) {
			temp[i].st = new(Student);
		}	
	}
}

if (structType >= 1 && structType <=4) {
	initializeWrapperArr(arr, sz, structType);
} else {
	errExit();
}

// 12 different kinds of functions to choose from to apply to your array
array<func (Wrapper;void)> baFns = new(array<func (Wrapper;void)>[3]);
array<func (Wrapper;void)> recFns = new(array<func (Wrapper;void)>[3]);
array<func (Wrapper;void)> ptFns = new(array<func (Wrapper;void)>[3]);
array<func (Wrapper;void)> stFns = new(array<func (Wrapper;void)>[3]);

baFns[0] = function (Wrapper wrap) void {
	wrap.ba.balance = wrap.ba.balance + 500.0;
};

baFns[1] = function (Wrapper wrap) void {
	wrap.ba.balance = wrap.ba.balance - 20.0;
};

baFns[2] = function (Wrapper wrap) void {
	wrap.ba.id = wrap.ba.id + 2;
};

recFns[0] = function (Wrapper wrap) void {
	wrap.rec.length = wrap.rec.length + 2.0;
};

recFns[1] = function (Wrapper wrap) void {
	wrap.rec.length = wrap.rec.length / 5.0;
};

recFns[2] = function (Wrapper wrap) void {
	wrap.rec.width = wrap.rec.width * 3.0;
};

ptFns[0] = function (Wrapper wrap) void {
	wrap.pt.x = wrap.pt.x + 7.9;
};

ptFns[1] = function (Wrapper wrap) void {
	wrap.pt.x = wrap.pt.x * -1.0;
};

ptFns[2] = function (Wrapper wrap) void {
	wrap.pt.y = wrap.pt.y - 15.0;
};

stFns[0] = function (Wrapper wrap) void {
	wrap.st.name = "Bob";
};

stFns[1] = function (Wrapper wrap) void {
	wrap.st.numClasses = rand_afterseed();
};

stFns[2] = function (Wrapper wrap) void {
	wrap.st.id = wrap.st.id + 3;
};

// the function which applies a function to each element of an array
function applyToEach(array<Wrapper> arr, func (Wrapper;void) fn, int sz) void {
	for (int i = 0; i<sz; i++) {
		fn(arr[i]);
	}
}

// print the array of structs
function printArr(array<Wrapper> arr, int structType, int sz) void {
	println("[");
	if (structType == 1) {
		// BankAccount
		for(int i = 0; i< sz; i++) {
			println("balance: " + str_of_float(arr[i].ba.balance));
			println("id: " + str_of_int(arr[i].ba.id));
			println(";");
		}
	} elif (structType == 2) {
		// Rectangle
		for(int i = 0; i< sz; i++) {
			println("width: " + str_of_float(arr[i].rec.width));
			println("length: " + str_of_float(arr[i].rec.length));
			println(";");
		}
	} elif (structType == 3) {
		// Point
		for(int i = 0; i< sz; i++) {
			println("x: " + str_of_float(arr[i].pt.x));
			println("y: " + str_of_float(arr[i].pt.y));
			println(";");
		}
	} elif (structType == 4){
		// student
		for(int i = 0; i< sz; i++) {
			println("name: " + arr[i].st.name);
			println("year: " + str_of_int(arr[i].st.year));
			println("numClasses: " + str_of_int(arr[i].st.numClasses));
			println("id: " + str_of_int(arr[i].st.id));
			println(";");
		}
	} else {
		errExit();
	}
	println("]");
}

string fnResultStr;
int fnResult;

println("Here's the initial array of structs");
printArr(arr, structType, sz);

if (structType == 1) {
	// BankAccount
	println("Now choose a function to apply to the array of structs:");
	println("1: Give everyone 500$!");
	println("2: Take 20$ from everyone.");
	println("3: Increase IDs by 2");
	println("Pick a number:");
	fnResultStr = scan_line(25);
	fnResult = int_of_str(fnResultStr);
	if (fnResult >= 1 && fnResult <=3) {
		applyToEach(arr, baFns[fnResult-1], sz);
	} else {
		errExit();
	}
} elif (structType == 2) {
	// Rectangle
	println("Now choose a function to apply to the array of structs:");
	println("1: Increase the length by 2");
	println("2: Divide the length by 5");
	println("3: Multiply width by 3");
	println("Pick a number:");
	fnResultStr = scan_line(25);
	fnResult = int_of_str(fnResultStr);
	if (fnResult >= 1 && fnResult <=3) {
		applyToEach(arr, recFns[fnResult-1], sz);
	} else {
		errExit();
	}
} elif (structType == 3) {
	// point
	println("Now choose a function to apply to the array of structs:");
	println("1: Move point right by 7.9");
	println("2: Flip point across y-axis");
	println("3: Move point down by 15");
	println("Pick a number:");
	fnResultStr = scan_line(25);
	fnResult = int_of_str(fnResultStr);
	if (fnResult >= 1 && fnResult <=3) {
		applyToEach(arr, ptFns[fnResult-1], sz);
	} else {
		errExit();
	}
} else{
	// student
	println("Now choose a function to apply to the array of structs:");
	println("1: Give each student a name");
	println("2: Change the number of classes");
	println("3: Change the student ID");
	println("Pick a number:");
	fnResultStr = scan_line(25);
	fnResult = int_of_str(fnResultStr);
	if (fnResult >= 1 && fnResult <=3) {
		applyToEach(arr, stFns[fnResult-1], sz);
	} else {
		errExit();
	}
}

println("Here is the changed array of structs.");
printArr(arr, structType, sz);

\end{lstlisting}
\end{mdframed}
\subsection{demo2.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
// ascii art demo
// store each letter as a 2d array
// based on the "standard" font at http://www.figlet.org/fonts/standard.flf
// here we only have capital alphabet characters
array<string> mapNumToLetter = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
array<array<string>> alphabet = new(array<array<string>>[26]);
for(int i = 0; i< 26; i++) {
	alphabet[i] = new(array<string>[6]);
}

alphabet[0][0] = "     _    ";
alphabet[0][1] = "    / \   ";
alphabet[0][2] = "   / _ \  ";
alphabet[0][3] = "  / ___ \ ";
alphabet[0][4] = " /_/   \_\";
alphabet[0][5] = "          ";

alphabet[1][0] = "  ____  ";
alphabet[1][1] = " | __ ) ";
alphabet[1][2] = " |  _ \ ";
alphabet[1][3] = " | |_) |";
alphabet[1][4] = " |____/ ";
alphabet[1][5] = "        ";

alphabet[2][0] = "   ____ ";
alphabet[2][1] = "  / ___|";
alphabet[2][2] = " | |    ";
alphabet[2][3] = " | |___ ";
alphabet[2][4] = "  \____|";
alphabet[2][5] = "        ";

alphabet[3][0] = "  ____  ";
alphabet[3][1] = " |  _ \ ";
alphabet[3][2] = " | | | |";
alphabet[3][3] = " | |_| |";
alphabet[3][4] = " |____/ ";
alphabet[3][5] = "        ";

alphabet[4][0] = "  _____ ";
alphabet[4][1] = " | ____|";
alphabet[4][2] = " |  _|  ";
alphabet[4][3] = " | |___ ";
alphabet[4][4] = " |_____|";
alphabet[4][5] = "        ";

alphabet[5][0] = "  _____ ";
alphabet[5][1] = " | ____|";
alphabet[5][2] = " | |_   ";
alphabet[5][3] = " |  _|  ";
alphabet[5][4] = " |_|    ";
alphabet[5][5] = "        ";

alphabet[6][0] = "   ____ ";
alphabet[6][1] = "  / ___|";
alphabet[6][2] = " | |  _ ";
alphabet[6][3] = " | |_| |";
alphabet[6][4] = "  \____|";
alphabet[6][5] = "        ";

alphabet[7][0] = "  _   _ ";
alphabet[7][1] = " | | | |";
alphabet[7][2] = " | |_| |";
alphabet[7][3] = " |  _  |";
alphabet[7][4] = " |_| |_|";
alphabet[7][5] = "        ";

alphabet[8][0] = "  ___ ";
alphabet[8][1] = " |_ _|";
alphabet[8][2] = "  | | ";
alphabet[8][3] = "  | | ";
alphabet[8][4] = " |___|";
alphabet[8][5] = "      ";

alphabet[9][0] = "      _ ";
alphabet[9][1] = "     | |";
alphabet[9][2] = "  _  | |";
alphabet[9][3] = " | |_| |";
alphabet[9][4] = "  \___/ ";
alphabet[9][5] = "        ";

alphabet[10][0] = "  _  __";
alphabet[10][1] = " | |/ /";
alphabet[10][2] = " | ' / ";
alphabet[10][3] = " | . \ ";
alphabet[10][4] = " |_|\_\";
alphabet[10][5] = "       ";

alphabet[11][0] = "  _     ";
alphabet[11][1] = " | |    ";
alphabet[11][2] = " | |    ";
alphabet[11][3] = " | |___ ";
alphabet[11][4] = " |_____|";
alphabet[11][5] = "        ";

alphabet[12][0] = "  __  __ ";
alphabet[12][1] = " |  \/  |";
alphabet[12][2] = " | |\/| |";
alphabet[12][3] = " | |  | |";
alphabet[12][4] = " |_|  |_|";
alphabet[12][5] = "         ";

alphabet[13][0] = "  _   _ ";
alphabet[13][1] = " | \ | |";
alphabet[13][2] = " |  \| |";
alphabet[13][3] = " | |\  |";
alphabet[13][4] = " |_| \_|";
alphabet[13][5] = "        ";

alphabet[14][0] = "   ___  ";
alphabet[14][1] = "  / _ \ ";
alphabet[14][2] = " | | | |";
alphabet[14][3] = " | |_| |";
alphabet[14][4] = "  \___/ ";
alphabet[14][5] = "        ";

alphabet[15][0] = "  ____  ";
alphabet[15][1] = " |  _ \ ";
alphabet[15][2] = " | |_) |";
alphabet[15][3] = " |  __/ ";
alphabet[15][4] = " |_|    ";
alphabet[15][5] = "        ";

alphabet[16][0] = "   ___  ";
alphabet[16][1] = "  / _ \ ";
alphabet[16][2] = " | | | |";
alphabet[16][3] = " | |_| |";
alphabet[16][4] = "  \__\_\";
alphabet[16][5] = "        ";

alphabet[17][0] = "  ____  ";
alphabet[17][1] = " |  _ \ ";
alphabet[17][2] = " | |_) |";
alphabet[17][3] = " |  _ < ";
alphabet[17][4] = " |_| \_\";
alphabet[17][5] = "        ";

alphabet[18][0] = "  ____  ";
alphabet[18][1] = " / ___| ";
alphabet[18][2] = " \___ \ ";
alphabet[18][3] = "  ___) |";
alphabet[18][4] = " |____/ ";
alphabet[18][5] = "        ";

alphabet[19][0] = "  _____ ";
alphabet[19][1] = " |_   _|";
alphabet[19][2] = "   | |  ";
alphabet[19][3] = "   | |  ";
alphabet[19][4] = "   |_|  ";
alphabet[19][5] = "        ";

alphabet[20][0] = "  _   _ ";
alphabet[20][1] = " | | | |";
alphabet[20][2] = " | | | |";
alphabet[20][3] = " | | | |";
alphabet[20][4] = "  \___/ ";
alphabet[20][5] = "        ";

alphabet[21][0] = " __     __";
alphabet[21][1] = " \ \   / /";
alphabet[21][2] = "  \ \ / / ";
alphabet[21][3] = "   \ V /  ";
alphabet[21][4] = "    \_/   ";
alphabet[21][5] = "          ";

alphabet[22][0] = " __        __";
alphabet[22][1] = " \ \      / /";
alphabet[22][2] = "  \ \ /\ / / ";
alphabet[22][3] = "   \ V  V /  ";
alphabet[22][4] = "    \_/\_/   ";
alphabet[22][5] = "             ";

alphabet[23][0] = " __  __";
alphabet[23][1] = " \ \/ /";
alphabet[23][2] = "  \  / ";
alphabet[23][3] = "  /  \ ";
alphabet[23][4] = " /_/\_\";
alphabet[23][5] = "       ";

alphabet[24][0] = " __   __";
alphabet[24][1] = " \ \ / /";
alphabet[24][2] = "  \ V / ";
alphabet[24][3] = "   | |  ";
alphabet[24][4] = "   |_|  ";
alphabet[24][5] = "        ";

alphabet[25][0] = "  _____";
alphabet[25][1] = " |__  /";
alphabet[25][2] = "   / / ";
alphabet[25][3] = "  / /_ ";
alphabet[25][4] = " /____|";
alphabet[25][5] = "       ";

// technically can hardcode 6 below
function printLetter (array<string> letter, int sz) void {
	for(int i = 0; i<sz; i++) {
		println(letter[i]);
	}
}

// match the character to the alphabet index
function lookupIndex (string char) int {
	for (int i = 0; i<26; i++){
		if (mapNumToLetter[i]==char) {
			return i;
		}
	}
	return -1;
}

// the passed in argument is an array of CHARACTERS
function printString (array<string> toPrint, int sz) void {
	int idx = 0;
	for(int j = 0; j<6; j++){
		for(int i = 0; i<sz; i++){
			idx = lookupIndex(toPrint[i]);
			if (idx!=-1) {
				print(alphabet[idx][j]);
			}
		}
		println("");
	}
}

println("Here's a sample of the font");
for (int i = 0; i<3; i++){
	// print 3 letters
	printLetter(alphabet[i], 6);
}

array<string> toPrintStr = new(array<string>[10]);

println("Now ascii-fy your own string up to 10 characters");
println("Please input a string of just lower case characters");

function getUserIn() int {
	for (int i = 0; i<10; i++){
		string result = scan_char();
		if(result == ""){
			return i;
		}
		toPrintStr[i] = result;
	} 
	return 10;
}

int numChars = getUserIn();
printString(toPrintStr, numChars);
\end{lstlisting}
\end{mdframed}
\subsection{echo.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
string result = scan_line(25);
println(result);\end{lstlisting}
\end{mdframed}
\subsection{hello2.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
function foo() func(;string) {
  string x = "Hello World";
  return function () string {
    return x;
  };
}
println(foo()());\end{lstlisting}
\end{mdframed}
\subsection{hello.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
function create_get_hello() func(;string) {
  string x = "Hello";
  return function() string {
    return x;
  };
}

function create_hello_func() func(string;string) {
  string y = create_get_hello()() + " ";
  return function(string name) string {
    return y + name + "!";
  };
}

println(create_hello_func()("World"));\end{lstlisting}
\end{mdframed}
\subsection{scan_from_stdin.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
string result = scan_line(25);
println("you inputted:");
println(result);
if (int_of_str(result)!=-1){
	println("That's a number!");
} else {
	println("Not a number");
}\end{lstlisting}
\end{mdframed}
\subsection{sudoku_solver.shoo}
\begin{mdframed}[hidealllines=true,backgroundcolor=blue!20]
\begin{lstlisting}
// partially based off the Java implementation of a sudoku solver here:
// https://www.baeldung.com/java-sudoku
// and partially based off of Cindy Le's Leetcode solution to Sudoku solver

// print a n x n board
function printBoard (array<array<int>> board, int sz) void {
	// sz should be 9... but we won't hardcode it here
	for(int i =0; i<9; i++){
		for(int j = 0; j<9; j++){
			print(str_of_int(board[i][j]));
			print(", ");
		}
		println("");
	}
}


function solveHelper(array<array<int>> board, int index) bool {
	if (index >= 81) {
		return true;
	}
	int x = index / 9;
	int y = index % 9;
	if (board[x][y] != 0) {
		return solveHelper(board, index + 1);
	}

	array<bool> used = new(array<bool>[10]);
	for (int i = 0; i < 9; i++) {
		used[board[x][i]] = true;
		used[board[i][y]] = true;
	}

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			used[board[(x/3)*3+i][(y/3)*3+j]] = true;
		}
	}

	for (int i = 1; i <= 9; i++) {
		if (!used[i]) {
			board[x][y] = i;
			if (solveHelper(board, index + 1)) {
				return true;
			}
		}
	}

	board[x][y] = 0;
	return false;
}

// initialize the sudoku board
array<array<int>> board = new(array<array<int>>[9]);

for(int i = 0; i<9; i++) {
	board[i] = new(array<int>[9]);
	for(int k = 0; k<9; k++){
		board[i][k] = 0;
	}
}

// set up the default board
// expects a zero'd out, initialized 9x9 board
function defaultBoard(array<array<int>> board) void {
	board[0][0] = 8;
	board[1][2] = 3;
	board[1][3] = 6;
	board[2][1] = 7;
	board[2][4] = 9;
	board[2][6] = 2;
	board[3][1] = 5;
	board[3][5] = 7;
	board[4][4] = 4;
	board[4][5] = 5;
	board[4][6] = 7;
	board[5][3] = 1;
	board[5][7] = 3;
	board[6][2] = 1;
	board[6][7] = 6;
	board[6][8] = 8;
	board[7][2] = 8;
	board[7][3] = 5;
	board[7][7] = 1;
	board[8][1] = 9;
	board[8][6] = 4;
}

// set up and print default board
println("Here is the default board:");
defaultBoard(board);
printBoard(board, 9);

// actually solve the sudoku board
println("");
solveHelper(board, 0);
println("************************************************");
println("Here is the solved board:");
printBoard(board, 9);

//TODO: implement reading a board from stdin\end{lstlisting}
\end{mdframed}
